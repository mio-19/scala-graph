package scalax.collection

import scala.language.implicitConversions
import scala.collection.{AbstractIterable, AbstractIterator, SeqFacade}

import scalax.collection.generic._
import scalax.collection.edges._
import scalax.collection.hyperedges._

  abstract class AbstractHyperEdgeImplicits[E[N] <: AnyHyperEdge[N], C <: HyperEdgeCompanion[E]](companion: C) {

    trait AnyToEdge[N] extends Any {
      def n1: N
      def ~~[NN >: N](n2: NN): E[NN] = companion(n1, n2)
    }

    trait EdgeToEdge[N] extends Any {
      def e1: E[N]
      def ~~[NN >: N](n: NN): E[NN] = companion[NN](e1.ends ++ (n :: Nil))
    }
  }

  object HyperEdgeImplicits extends AbstractHyperEdgeImplicits[HyperEdge, HyperEdge.type](HyperEdge) {
    implicit class HyperAnyToEdge[N](override val n1: N)             extends AnyVal with AnyToEdge[N]
    implicit class HyperEdgeToEdge[N](override val e1: HyperEdge[N]) extends AnyVal with EdgeToEdge[N]
  }

  object OrderedHyperEdgeImplicits
      extends AbstractHyperEdgeImplicits[OrderedHyperEdge, OrderedHyperEdge.type](OrderedHyperEdge) {
    implicit class HyperAnyToEdge[N](override val n1: N)                    extends AnyVal with AnyToEdge[N]
    implicit class HyperEdgeToEdge[N](override val e1: OrderedHyperEdge[N]) extends AnyVal with EdgeToEdge[N]
  }

  abstract class AbstractDiHyperEdgeImplicits[E[N] <: AnyDiHyperEdge[N], C <: DiHyperEdgeCompanion[E]](companion: C) {

    trait AnyToEdge[N] extends Any {
      def source: N
      def ~~>[NN >: N](target: NN): E[NN]            = companion(Iterable(source), Iterable(target))
      def ~~>[NN >: N](targets: Iterable[NN]): E[NN] = companion(Iterable(source), targets)
    }

    trait IterableToEdge[N] extends Any {
      def sources: Iterable[N]
      def ~~>[NN >: N](target: NN): E[NN]            = companion(sources, Iterable(target))
      def ~~>[NN >: N](targets: Iterable[NN]): E[NN] = companion(sources, targets)
    }
  }

  object DiHyperEdgeImplicits extends AbstractDiHyperEdgeImplicits[DiHyperEdge, DiHyperEdge.type](DiHyperEdge) {
    implicit class DiHyperAnyToEdge[N](override val source: N)             extends AnyVal with AnyToEdge[N]
    implicit class DiHyperEdgeToEdge[N](override val sources: Iterable[N]) extends AnyVal with IterableToEdge[N]
  }

  object OrderedDiHyperEdgeImplicits
      extends AbstractDiHyperEdgeImplicits[OrderedDiHyperEdge, OrderedDiHyperEdge.type](OrderedDiHyperEdge) {
    implicit class DiHyperAnyToEdge[N](override val source: N)             extends AnyVal with AnyToEdge[N]
    implicit class DiHyperEdgeToEdge[N](override val sources: Iterable[N]) extends AnyVal with IterableToEdge[N]
  }

  trait AbstractEdgeImplicits[N, E[X] <: Edge[X] with AnyEdge[X], C <: EdgeCompanion[E]] extends Any {
    protected def companion: C
    def n1: N
    def ~[NN >: N](n2: NN): E[NN] = companion(n1, n2)
  }

  /* supports implicit conversion from `node_1 ~ node_2` to `UnDiEdge(node_1, node_2)`.
   */
  implicit class UnDiEdgeImplicits[N](override val n1: N)
      extends AnyVal
      with AbstractEdgeImplicits[N, UnDiEdge, UnDiEdge.type] {
    protected def companion = UnDiEdge
  }

  trait AbstractDiEdgeImplicits[N, E[N] <: AnyDiEdge[N], C <: EdgeCompanion[E]] extends Any {
    protected def companion: C
    def source: N
    def ~>[NN >: N](target: NN): E[NN] = companion(source, target)
  }

  implicit final class DiEdgeImplicits[N](val source: N)
      extends AnyVal
      with AbstractDiEdgeImplicits[N, DiEdge, DiEdge.type] {
    protected def companion = DiEdge
  }
